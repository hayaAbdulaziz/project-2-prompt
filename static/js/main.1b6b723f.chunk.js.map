{"version":3,"sources":["ListItem.js","ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","handleChange","e","setState","input","target","value","state","className","this","taskName","onClick","deleteitem","index","type","onChange","edititem","Markcomplete","React","Component","ListContainer","allItems","addIteme","map","task","key","App","addItem","preventDefault","console","log","newItem","onTextBoxChange","deleteallitem","Items","splice","newValue","newArray","currentSelecter","markedarray","completed","push","alert","markdelete","forEach","element","i","booklist","item","setEditing","axios","method","url","then","res","answer","data","items","titlesArr","length","volumeInfo","title","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1b6b723f.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItem.css';\nexport default class ListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // isEdit:false,\n       input:\"\",\n      }\n    }\n    handleChange=(e)=>{\n       this.setState({\n        input:e.target.value\n\n       })\n    }\n  render() {\n    return (\n      <div>\n      <p className=\"list\" >{this.props.taskName}</p>\n     \n      <button onClick={()=>this.props.deleteitem(this.props.index)} type=\"button\" className=\"button\"> deleteitem</button>\n      <input type=\"text\" value={this.state.input} onChange={this.handleChange}/>\n     \n      <button onClick={()=> this.props.edititem(this.props.index,this.state.input)}type=\"button\" className='button-edit'>Edit </button > \n     \n      <button onClick={()=> this.props.Markcomplete(this.props.index)} type=\"button\" className=\"button\">Markcomplete</button>\n\n      </div>\n    );\n  }\n}","import React, { Fragment } from 'react';\nimport ListItem from './ListItem';\nexport default class ListContainer extends React.Component {\n  \n    \n  render() {\n    const allItems = this.props.addIteme.map((task, index)=> {\n      return(\n        <ListItem key={index+1} taskName={task}  index={index}  deleteitem={this.props.deleteitem} \n        edititem ={this.props.edititem} Markcomplete={this.props.Markcomplete} />\n      ) \n    });\n   \n    return (\n      <div>  \n        {allItems}\n       \n      </div>\n      \n    );\n}\n}\n\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport ListItem from \"./ListItem\";\nimport ListContainer from \"./ListContainer\";\nimport { Link } from \"react-router-dom\";\n//API https://www.googleapis.com/books/v1/volumes?q=quilting.\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addIteme: [],\n      booklist: [],\n      item: \"\",\n      completed: [],\n      setEditing: false\n    };\n  }\n  addItem = e => {\n    e.preventDefault();\n    console.log(\"Add Item!\");\n    this.setState({\n      addIteme: [...this.state.addIteme, this.state.newItem],\n      newItem: \"\"\n    });\n  };\n  onTextBoxChange = e => {\n    this.setState({\n      newItem: e.target.value\n    });\n  };\n  componentDidMount() {\n    console.log(this.state);\n    axios({\n      method: \"get\",\n      url: \"https://www.googleapis.com/books/v1/volumes?q=quilting\"\n    })\n      .then(res => {\n        console.log(\"RESPONSE: \", res);\n        const answer = res.data.items;\n        let titlesArr = [];\n        for (let i = 0; i < answer.length; i++) {\n          titlesArr.push(answer[i].volumeInfo.title);\n        }\n        this.setState({\n          booklist: titlesArr\n        });\n        console.log(this.state.booklist);\n      })\n      .catch(err => {\n        console.log(\"ERROR: \", err);\n      });\n  }\n\n  deleteallitem = key => {\n    //key.preventDefault();\n    console.log(key);\n    const Items = this.state.addIteme;\n    console.log(Items);\n    Items.splice(key);\n    this.setState({ addIteme: Items });\n  };\n  deleteitem = key => {\n    //key.preventDefault();\n    console.log(key);\n    const Items = this.state.addIteme;\n    console.log(Items);\n    Items.splice(key, 1);\n    this.setState({ addIteme: Items });\n  };\n\n  edititem = (index, newValue) => {\n    console.log(index, newValue);\n    // index you to edit + the value\n    const newArray = this.state.addIteme;\n    newArray[index] = newValue;\n\n    this.setState({\n      addIteme: newArray\n    });\n  };\n  Markcomplete = index => {\n    console.log(\"mark complete\");\n    const currentSelecter = this.state.addIteme[index];\n     console.log(index, \"index\");\n    console.log(this.state.addIteme, \"add item array\");\n    console.log(currentSelecter, \"current selector\");\n    const markedarray = this.state.completed;\n    console.log(markedarray, \"compplete arr\");\n    markedarray.push(currentSelecter);\n    this.setState({\n      completed: markedarray\n    });\n    console.log(markedarray);\n    alert(\"Markcomplete\");\n  };\n  markdelete = () => {\n    // const completed=Array.prototype.slice.call(this.state.completed)\n    const addIteme = this.state.addIteme;\n    console.log(\"delete\");\n    const oldArray=this.state.completed.forEach((element,i) => {\n      // const completedIndex = addIteme[element];\n      // console.log(completedIndex);\n      addIteme.splice(element - 1, 1);\n    });\n    this.setState({\n      addIteme: addIteme\n    });\n  };\n  render() {\n    return (\n      <div>\n        <form>\n          <div className=\"Form\">\n            <h1>The list of books I want to read</h1>\n            <label className=\"label\">Add new Item</label>\n            <input\n              type=\"text\"\n              value={this.state.newItem}\n              onChange={this.onTextBoxChange}\n            ></input>\n            <button onClick={this.addItem} type=\"button\" className=\"button\">\n              Add\n            </button>\n            <button\n              onClick={this.deleteallitem}\n              type=\"button\"\n              className=\"button\"\n            >\n              {\" \"}\n              deleteallitem\n            </button>\n            <button onClick={this.markdelete} type=\"button\" className=\"button\">\n              Markdelete\n            </button>\n\n            <ListContainer\n              addIteme={this.state.addIteme}\n              deleteitem={this.deleteitem}\n              edititem={this.edititem}\n              Markcomplete={this.Markcomplete}\n            />\n          </div>\n        </form>\n        <h1>List of recommended books</h1>\n        <p>{this.state.booklist[0]}</p>\n        <p>{this.state.booklist[1]}</p>\n        <p>{this.state.booklist[2]}</p>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}